import pandas as pd
import os
import re
import datetime
from snakemake.utils import min_version, validate
from snakemake.logging import logger
from scripts.resources import Resources
include: "scripts/general_functions.smk"

# Workflow version
VERSION = "v0.5.0"

# Set minimum snakemake version
min_version("8.13.0")

report: "report/workflow.rst"

# Wrapper version
wrapper_version = "v3.10.2"

logger.info(f"Workflow version: {VERSION}")
logger.info(f"Wrapper version: {wrapper_version}")

# Define Docker container for Apptainer usage
containerized: f"docker://niekwit/chip-seq:{VERSION}"

# Load config file
configfile: "config/config.yml"
validate(config, "schemas/config.schema.yaml")

# Load ChIP info
regions = config["peak_calling"]["macs2"]["regions"]

# Load genome resources to be used in rules
resources = Resources(config["genome"], config["ensembl_genome_build"])
if config["spike_in"]["apply"]:
    si_resources = Resources(config["spike_in"]["genome"], config["spike_in"]["ensembl_genome_build"])
fasta = resources.fasta
genome = resources.genome

# Get sample names
SAMPLES = samples()
IP_SAMPLES = ip_samples()
CONTROL_SAMPLES = control_samples()
CONDITIONS = conditions()
peak_mode = peak_mode()
bowtie2_dir = bowtie2_dir()

include: "rules/resources.smk"
include: "rules/qc.smk"
include: "rules/plotting.smk"
include: "rules/trim.smk"
include: "rules/align.smk"
include: "rules/peaks.smk"
include: "rules/deeptools.smk"
include: "rules/bigwig.smk"

# Target rule
rule all:
    input: 
        targets()

# Save snakemake terminal output to log file
time = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
snake_log = f"logs/snakemake/{time}_snakemake.log"
os.makedirs("logs/snakemake", exist_ok=True)

onsuccess: 
    shell("cp -v {log} {snake_log}")
    print("Analysis finished successfully!")
onerror:
    shell("cp -v {log} {snake_log}")
    print(f"Analysis failed...\nCheck {snake_log} for details")